目标

认识常用类型：int、long long、double、bool、size_t
会用 printf 打印它们
要点小抄

int：常用整数
long long：更大的整数
double：小数
bool：布尔（需要 #include <stdbool.h>，值为 0 或 1）
size_t：表示“大小/长度”，打印用 %zu
常用占位符：%d(int)、%lld(long long)、%f(double)、%.2f(保留2位小数)、%d(bool)、%zu(size_t)

输入输出（推荐用法）

printf 常用占位符
%d int，%u unsigned int
%ld/%lld long/long long
%f double（可用 %.2f 控制小数位）
%c 字符，%s 字符串
%p 指针地址，%zu 打印 size_t
例：printf("age=%d, pi=%.2f, name=%s\n", 23, 3.1415, "Alice");

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

int main(void) {
    // 展示不同类型的字节数
    printf("int=%zu, long long=%zu, double=%zu, bool=%zu, size_t=%zu\n",
           sizeof(int), sizeof(long long), sizeof(double), sizeof(bool), sizeof(size_t));

    // 按格式输出
    int age = 20;
    long long population = 1400000000LL;
    double pi = 3.1415926;
    bool ok = 1; // 1 表示真，0 表示假

    printf("age=%d, population=%lld, pi=%.2f, ok=%d\n",
           age, population, pi, ok);

    return 0;
}

表达式（算对和不踩坑）

算术：+ - * / %（整数除法会丢小数，7/2 = 3）
比较：== != < > <= >=（结果是 0 或 1）
逻辑：&& || !（有短路特性）
自增：i++、++i（不要在一个表达式里多次改同一变量）
转换：(double)a/b 能得到小数
小例子：int a=7,b=2; double r=(double)a/b; // r=3.5

double 和 size_t 核心区别（简单版）

含义不同
size_t：表示“非负的个数/长度/字节数”的整数类型（没有小数）。
double：表示带小数的实数（可以有小数部分）。
精确性
size_t：整数运算，结果精确。
double：浮点数，可能出现舍入误差（比如显示成 8191.999999）。
使用场景
计数/长度/字节数/数组大小等，用 size_t 最合适。
需要小数的量（比如 1.5 MB）用 double 做中间计算，但最终要落回整数字节数。
#include <stdio.h>
#include <stddef.h>

int main(void){
    size_t kb = 8;

    // 推荐：整数精确计算
    size_t bytes1 = kb * 1024;
    printf("size_t 结果: %zu\n", bytes1);   // 8192，精确

    // 可行但不推荐：用 double 表示字节数
    double bytes2 = kb * 1024;              // 这里通常打印 8192.0，但本质是浮点
    printf("double 结果: %.0f\n", bytes2);  // 需要用 %.0f 去掉小数

    return 0;
}
什么时候可能出问题

用 double 做更多运算后打印，可能出现 8191.999999 之类的显示误差。
字节数、数组长度、循环次数这些本来就不该有小数，用 double 表达不合适。
结论

这类“KB/MB→字节”的结果是整数，请用 size_t。只有在确实需要小数（比如 1.5MB）时，用 double 作为中间值，最后再转换为整数字节数。



练习1：定义三个整数 a=7, b=2, c=10，打印它们的和与平均值（平均值用 double，保留2位小数）。格式示例：sum=19, avg=6.33
#include <stdio.h>
int main(void){
    int a = 7;
    int b = 2;
    int c = 10;
    int sum = a + b + c;
    double avg = sum / 3.0;  // 用 3.0 触发小数除法（或写 (double)sum / 3）

    printf("sum = %d\n", sum);
    printf("avg = %.2f\n", avg);//打印平均值时可用 %.2f 保留两位小数
    return 0;
}

练习2：定义 size_t bytes = 4096，打印：buffer bytes=4096（用 %zu）
#include <stdio.h>
#include <stddef.h>  // 提供 size_t

int main(void){
    size_t bytes = 4096;  //size_t 专门用来表示“大小/长度”的整数类型
    printf("buffer bytes=%zu\n", bytes); //%zu 按十进制输出 size_t 的值；\n 换行
    return 0;
}



